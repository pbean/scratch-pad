name: Cross-Platform Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  test-matrix:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20  # Reduce from 30 minutes for faster feedback
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js and PNPM
        uses: ./.github/actions/setup-node-pnpm

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        uses: ./.github/actions/install-linux-deps

      # PLATFORM OPTIMIZATION: Linux-specific setup for headless testing
      - name: Configure Linux Display Server
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      # PLATFORM OPTIMIZATION: macOS-specific resource configuration
      - name: Configure macOS resources
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          # Increase file descriptor limit for macOS
          ulimit -n 10240
          # Show system resources
          sysctl hw.ncpu hw.memsize
          # Set conservative test environment for macOS
          echo "RUST_TEST_THREADS=1" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max-old-space-size=6144" >> $GITHUB_ENV
          echo "FORCE_COLOR=0" >> $GITHUB_ENV

      # PLATFORM OPTIMIZATION: Windows-specific environment setup  
      - name: Configure Windows Environment
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Set Node.js memory allocation for Windows
          $env:NODE_OPTIONS = "--max-old-space-size=4096"
          $env:CI = "true"
          # Add to GitHub environment
          echo "NODE_OPTIONS=--max-old-space-size=4096" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CI=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # PLATFORM-CONDITIONAL: Run frontend tests with OS-specific optimizations
      - name: Run frontend tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "Running frontend tests with Linux optimizations"
          export NODE_OPTIONS="--max-old-space-size=4096"
          export DISPLAY=:99
          pnpm test --run --config vitest.ci.config.ts --reporter=verbose

      - name: Run frontend tests (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "Running frontend tests with macOS optimizations"
          export NODE_OPTIONS="--max-old-space-size=6144"
          export FORCE_COLOR=0
          pnpm test --run --config vitest.ci.config.ts --reporter=verbose --no-coverage

      - name: Run frontend tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Running frontend tests with Windows optimizations"
          $env:NODE_OPTIONS = "--max-old-space-size=4096"
          pnpm test --run --config vitest.ci.config.ts --reporter=verbose
        
      - name: Run TypeScript type check
        shell: bash
        run: |
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            pnpm type-check:ci
          else
            pnpm type-check
          fi

      - name: Run frontend linting
        shell: bash
        run: pnpm lint

      - name: Build frontend
        shell: bash
        run: |
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            pnpm build:ci || pnpm build
          else
            pnpm build:strict
          fi

      # PLATFORM-CONDITIONAL: Run backend tests with OS-specific settings
      - name: Run backend tests (Linux/Windows)
        if: matrix.os != 'macos-latest'
        working-directory: src-tauri
        shell: bash
        run: |
          echo "Running backend tests for ${{ matrix.os }}"
          cargo test --lib --release

      - name: Run backend tests (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: src-tauri
        shell: bash
        run: |
          echo "Running backend tests for macOS with single thread"
          # Use single thread for macOS to avoid resource issues
          export RUST_TEST_THREADS=1
          cargo test --lib --release

      - name: Build backend
        shell: bash
        run: cd src-tauri && cargo build --release

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 25  # Reduce timeout for coverage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js and PNPM
        uses: ./.github/actions/setup-node-pnpm

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          components: 'llvm-tools-preview'

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps

      # Setup display server for coverage tests too
      - name: Configure Linux Display Server
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Run frontend tests with coverage
        shell: bash
        run: |
          echo "Running frontend tests with coverage"
          export NODE_OPTIONS="--max-old-space-size=4096"
          export DISPLAY=:99
          pnpm test --run --coverage --config vitest.ci.config.ts

      - name: Run backend tests with coverage
        working-directory: src-tauri
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info,./src-tauri/lcov.info
          fail_ci_if_error: false